using System;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

public class CurrencyClient
{
	private const int Port = 8080;
	private const string Host = "127.0.0.1";

	//  –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è —ñ –Ω–∞–¥—Å–∏–ª–∞—î/–æ—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ
	public async Task<string> SendRequestAsync(string requestMessage)
	{
		try
		{
			using (var client = new TcpClient())
			{
				// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è 
				await client.ConnectAsync(Host, Port);

				using (var stream = client.GetStream())
				{
					// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
					byte[] requestData = Encoding.UTF8.GetBytes(requestMessage);
					await stream.WriteAsync(requestData, 0, requestData.Length);

					// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
					var buffer = new byte[1024];
					int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);

					if (bytesRead > 0)
					{
						return Encoding.UTF8.GetString(buffer, 0, bytesRead).Trim();
					}
					else
					{
						return "–ü–æ–º–∏–ª–∫–∞: –°–µ—Ä–≤–µ—Ä –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è –∞–±–æ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.";
					}
				}
			}
		}
		catch (SocketException e)
		{
			return $"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥'—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ ({Host}:{Port}). –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ. –î–µ—Ç–∞–ª—ñ: {e.Message}";
		}
		catch (Exception e)
		{
			return $"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e.Message}";
		}
	}

	// –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
	public static async Task Main(string[] args)
	{
		var clientApp = new CurrencyClient();
		Console.WriteLine("üåê –ö–ª—ñ—î–Ω—Ç \"–ö—É—Ä—Å –≤–∞–ª—é—Ç\". –î–ª—è –≤–∏—Ö–æ–¥—É –≤–≤–µ–¥—ñ—Ç—å 'exit' –∞–±–æ 'quit'.");
		Console.WriteLine("   –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É: –í–ê–õ–Æ–¢–ê1 –í–ê–õ–Æ–¢–ê2 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, USD EURO)");

		while (true)
		{
			Console.Write("\n–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç > ");
			string input = Console.ReadLine();

			if (string.IsNullOrWhiteSpace(input) || input.ToLower() == "exit" || input.ToLower() == "quit")
			{
				Console.WriteLine("... –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.");
				break;
			}

			// –í–∏–∫–ª–∏–∫ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è
			string response = await clientApp.SendRequestAsync(input);

			// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è  —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
			Console.WriteLine($"\n‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:\n{response}");
		}
	}
}
